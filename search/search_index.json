{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dotfiles","title":"dotfiles"},{"location":"#dotfiles","text":"","title":"dotfiles"},{"location":"infra/","text":"Infrastructure NixOS Anywhere nix run github:nix-community/nixos-anywhere -- --flake .#template --build-on-remote user@ip Packer Create proxmox templates. Run command inside OS folder e.g pkr-ubuntu-noble-1 packer build -var-file=<(sops -d ~/dotfiles/secrets/secret.tfvars.json) . Terraform Create and run infrastructure (virtual machines, DNS etc). Sync state in cloud with terraform login. terraform plan -var-file=<(sops -d ~/dotfiles/secrets/secret.tfvars.json) terraform apply -var-file=<(sops -d ~/dotfiles/secrets/secret.tfvars.json) -auto-approve or decrypt secrets first to *.dec.json (ignored by git but be careful anyway) sops -d ~/dotfiles/secrets/secrets.tfvars.json > secrets.dec.json terraform plan --var-file=secrets.dec.json terraform apply --var-file=secrets.dec.json For manual formatting: terraform fmt -write -recursive <folder> Generate documentation nix build .#options-doc Ansible ansible k3s-cluster -m ping ansible-galaxy install -r ./collections/requirements.yml","title":"Infrastructure"},{"location":"infra/#infrastructure","text":"","title":"Infrastructure"},{"location":"infra/#nixos-anywhere","text":"nix run github:nix-community/nixos-anywhere -- --flake .#template --build-on-remote user@ip","title":"NixOS Anywhere"},{"location":"infra/#packer","text":"Create proxmox templates. Run command inside OS folder e.g pkr-ubuntu-noble-1 packer build -var-file=<(sops -d ~/dotfiles/secrets/secret.tfvars.json) .","title":"Packer"},{"location":"infra/#terraform","text":"Create and run infrastructure (virtual machines, DNS etc). Sync state in cloud with terraform login. terraform plan -var-file=<(sops -d ~/dotfiles/secrets/secret.tfvars.json) terraform apply -var-file=<(sops -d ~/dotfiles/secrets/secret.tfvars.json) -auto-approve or decrypt secrets first to *.dec.json (ignored by git but be careful anyway) sops -d ~/dotfiles/secrets/secrets.tfvars.json > secrets.dec.json terraform plan --var-file=secrets.dec.json terraform apply --var-file=secrets.dec.json For manual formatting: terraform fmt -write -recursive <folder>","title":"Terraform"},{"location":"infra/#generate-documentation","text":"nix build .#options-doc","title":"Generate documentation"},{"location":"infra/#ansible","text":"ansible k3s-cluster -m ping ansible-galaxy install -r ./collections/requirements.yml","title":"Ansible"},{"location":"nixos/","text":"NixOS Test configurations nix-build '<nixpkgs/nixos>' -A vm -I nixpkgs=channel:nixos-24.05 \\ -I nixos-config=./configuration.nix Remote deploy via nixos-rebuild nixos-rebuild switch --flake .#profile --fast --use-remote-sudo \\ --target-host <user@host> --build-host <user@host> --verbose Apple upgrades When upgrading macOS your /etc/zshrc might reset. Result: commands or configurations stop working, NIX_PATH is empty etc. Fix: Add this to the bottom of /etc/zshrc. if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' fi Touch ID for sudo Also, macOS resets /etc/pam.d/sudo which enables touch id for sudo. More info here: Home-manager If home manager crashes on 'Could not find suitable profile directory': Manually create this folder: mkdir -p ~/.local/state/nix/profiles Node If node isn't available check that host configuration has nix-ld enabled. ... nixosConfigurations.host = nixpkgs.lib.nixosSystem { modules = [ ./<host>/configuration.nix nix-ld.nixosModules.nix-ld ]; ... programs.nix-ld.dev.enable = true;","title":"NixOS"},{"location":"nixos/#nixos","text":"","title":"NixOS"},{"location":"nixos/#test-configurations","text":"nix-build '<nixpkgs/nixos>' -A vm -I nixpkgs=channel:nixos-24.05 \\ -I nixos-config=./configuration.nix","title":"Test configurations"},{"location":"nixos/#remote-deploy-via-nixos-rebuild","text":"nixos-rebuild switch --flake .#profile --fast --use-remote-sudo \\ --target-host <user@host> --build-host <user@host> --verbose","title":"Remote deploy via nixos-rebuild"},{"location":"nixos/#apple-upgrades","text":"When upgrading macOS your /etc/zshrc might reset. Result: commands or configurations stop working, NIX_PATH is empty etc. Fix: Add this to the bottom of /etc/zshrc. if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' fi","title":"Apple upgrades"},{"location":"nixos/#touch-id-for-sudo","text":"Also, macOS resets /etc/pam.d/sudo which enables touch id for sudo. More info here:","title":"Touch ID for sudo"},{"location":"nixos/#home-manager","text":"If home manager crashes on 'Could not find suitable profile directory': Manually create this folder: mkdir -p ~/.local/state/nix/profiles","title":"Home-manager"},{"location":"nixos/#node","text":"If node isn't available check that host configuration has nix-ld enabled. ... nixosConfigurations.host = nixpkgs.lib.nixosSystem { modules = [ ./<host>/configuration.nix nix-ld.nixosModules.nix-ld ]; ... programs.nix-ld.dev.enable = true;","title":"Node"}]}