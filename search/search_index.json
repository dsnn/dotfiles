{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dotfiles","text":""},{"location":"infra/","title":"Infrastructure","text":""},{"location":"infra/#nixos-anywhere","title":"NixOS Anywhere","text":"<pre><code>    nix run github:nix-community/nixos-anywhere -- --flake .#template --build-on-remote user@ip\n</code></pre>"},{"location":"infra/#packer","title":"Packer","text":"<p>Create proxmox templates. Run command inside OS folder e.g pkr-ubuntu-noble-1</p> <pre><code>    packer build -var-file=&lt;(sops -d ~/dotfiles/secrets/secret.tfvars.json) .\n</code></pre>"},{"location":"infra/#terraform","title":"Terraform","text":"<p>Create and run infrastructure (virtual machines, DNS etc). Sync state in cloud with terraform login.</p> <pre><code>    terraform plan -var-file=&lt;(sops -d ~/dotfiles/secrets/secret.tfvars.json)\n    terraform apply -var-file=&lt;(sops -d ~/dotfiles/secrets/secret.tfvars.json) -auto-approve\n</code></pre> <p>or decrypt secrets first to *.dec.json (ignored by git but be careful anyway)</p> <pre><code>    sops -d ~/dotfiles/secrets/secrets.tfvars.json &gt; secrets.dec.json\n    terraform plan --var-file=secrets.dec.json\n    terraform apply --var-file=secrets.dec.json\n</code></pre> <p>For manual formatting:</p> <pre><code>    terraform fmt -write -recursive &lt;folder&gt;\n</code></pre>"},{"location":"infra/#generate-documentation","title":"Generate documentation","text":"<pre><code>    nix build .#options-doc\n</code></pre>"},{"location":"infra/#ansible","title":"Ansible","text":"<pre><code>    ansible k3s-cluster -m ping\n</code></pre> <pre><code>    ansible-galaxy install -r ./collections/requirements.yml\n</code></pre>"},{"location":"nixos/","title":"NixOS","text":""},{"location":"nixos/#test-configurations","title":"Test configurations","text":"<pre><code>    nix-build '&lt;nixpkgs/nixos&gt;' -A vm -I nixpkgs=channel:nixos-24.05 \\\n  -I nixos-config=./configuration.nix\n</code></pre>"},{"location":"nixos/#remote-deploy-via-nixos-rebuild","title":"Remote deploy via nixos-rebuild","text":"<pre><code>    nixos-rebuild switch --flake .#profile --fast --use-remote-sudo \\\n  --target-host &lt;user@host&gt; --build-host &lt;user@host&gt; --verbose\n</code></pre>"},{"location":"nixos/#apple-upgrades","title":"Apple upgrades","text":"<p>When upgrading macOS your /etc/zshrc might reset. Result: commands or configurations stop working, NIX_PATH is empty etc. Fix: Add this to the bottom of /etc/zshrc.</p> <pre><code>    if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then\n    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'\n    fi\n\n</code></pre>"},{"location":"nixos/#touch-id-for-sudo","title":"Touch ID for sudo","text":"<p>Also, macOS resets /etc/pam.d/sudo which enables touch id for sudo. More info here:</p>"},{"location":"nixos/#home-manager","title":"Home-manager","text":"<p>If home manager crashes on 'Could not find suitable profile directory': Manually create this folder:</p> <pre><code>    mkdir -p ~/.local/state/nix/profiles\n</code></pre>"},{"location":"nixos/#node","title":"Node","text":"<p>If node isn't available check that host configuration has nix-ld enabled.</p> <pre><code>  ...\n  nixosConfigurations.host = nixpkgs.lib.nixosSystem {\n    modules = [\n      ./&lt;host&gt;/configuration.nix\n      nix-ld.nixosModules.nix-ld\n    ];\n  ...\n\n  programs.nix-ld.dev.enable = true;\n</code></pre>"}]}