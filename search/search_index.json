{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>My dotfiles manage everything from NixOS configurations and automation with Ansible to infrastructure setup using Terraform. They also include setups for Proxmox and networking to maintain a streamlined and efficient homelab environment. It's all about keeping things organized and automated, ensuring my systems are easy to manage and deploy</p>"},{"location":"#todo","title":"TODO","text":"<p>For more information see issues.</p> <ul> <li>local nixos cache</li> <li>terraform sops</li> <li>catppuccin base16</li> <li>flake checker GitHub action</li> <li>tmux-continuum issue 118</li> <li>jellyfin hw acc</li> <li>impermanence</li> <li>flame</li> <li>docker registry ui</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>bottom</li> <li>deleting old generations</li> <li>upgrading macos</li> <li>tmux tilish</li> <li>tmuxp examples</li> <li>catppuccin</li> <li>bat-extras</li> <li>nix-community srvos</li> <li>nix-community infra</li> <li>proxmox template</li> </ul>"},{"location":"infra/ansible/","title":"Ansible","text":""},{"location":"infra/ansible/#ping","title":"Ping","text":"<pre><code>ansible -i inventory/k3s.yaml -m ping\n</code></pre>"},{"location":"infra/ansible/#install-requirements","title":"Install requirements","text":"<pre><code>ansible-galaxy install -r ./collections/requirements.yml\n</code></pre>"},{"location":"infra/dns/","title":"DNS","text":"<p>The custom dns server is hosted as a docker container in my homelab. For now it is hosted on the <code>srv-docker-01</code>.</p> <ul> <li> <p>Copy the configuration and docker compose with the ansible playbook <code>dns-server.yaml</code></p> </li> <li> <p>Start the container manually</p> </li> </ul> <p>tsig-key is generated with the command:</p> <pre><code>docker exec dns-server tsig-keygen -a hmac-sha256\n</code></pre>"},{"location":"infra/nixos/","title":"NixOS","text":""},{"location":"infra/nixos/#nixos-anywhere","title":"NixOS Anywhere","text":"<p>NixOS Anywhere</p> <pre><code>nix run github:nix-community/nixos-anywhere -- --flake .#template --build-on-remote user@ip\n</code></pre>"},{"location":"infra/nixos/#nixos-rebuild","title":"nixos-rebuild","text":"<p>Remote deploy via nixos-rebuild</p> <pre><code>nixos-rebuild switch --flake .#profile --fast --use-remote-sudo \\\n--target-host &lt;user@host&gt; --build-host &lt;user@host&gt; --verbose\n</code></pre>"},{"location":"infra/terraform/","title":"Terraform","text":""},{"location":"infra/terraform/#documentation","title":"Documentation","text":"<p>Documentation</p>"},{"location":"infra/terraform/#basic-usage","title":"Basic Usage","text":"<p>Create and run infrastructure (virtual machines, DNS etc). Sync state in cloud with terraform login.</p> <pre><code>terraform plan -var-file=&lt;(sops -d ~/dotfiles/secrets/secret.tfvars.json)\nterraform apply -var-file=&lt;(sops -d ~/dotfiles/secrets/secret.tfvars.json) -auto-approve\n</code></pre> <p>or decrypt secrets first to *.dec.json (ignored by git but be careful anyway)</p> <pre><code>sops -d ~/dotfiles/secrets/secrets.tfvars.json &gt; secrets.dec.json\nterraform plan --var-file=secrets.dec.json\nterraform apply --var-file=secrets.dec.json\n</code></pre>"},{"location":"infra/terraform/#formatting","title":"Formatting","text":"<p>For manual formatting:</p> <pre><code>terraform fmt -write -recursive &lt;folder&gt;\n</code></pre>"},{"location":"nix/home-manager/","title":"Home manager","text":""},{"location":"nix/home-manager/#shell","title":"Shell","text":"<p>To change shell when using standalone home manager on a e.g. ubuntu installation, use:</p> <pre><code>echo ~/.nix-profile/bin/zsh | sudo tee -a /etc/shells\nusermod -s ~/.nix-profile/bin/zsh $user\n</code></pre>"},{"location":"nix/home-manager/#options","title":"Options","text":"<p>Home-manager options</p>"},{"location":"nix/home-manager/#troubleshooting","title":"Troubleshooting","text":"<p>If home manager crashes on 'Could not find suitable profile directory': Manually create this folder:</p> <pre><code>mkdir -p ~/.local/state/nix/profiles\n</code></pre>"},{"location":"nix/nixos/","title":"NixOS","text":""},{"location":"nix/nixos/#test-configurations","title":"Test configurations","text":"<pre><code>nix-build '&lt;nixpkgs/nixos&gt;' -A vm -I nixpkgs=channel:nixos-24.05 \\\n-I nixos-config=./configuration.nix\n</code></pre>"},{"location":"nix/nixos/#generate-documentation","title":"Generate documentation","text":"<p>Example</p> <pre><code>nix build .#options-doc\n</code></pre>"},{"location":"nix/nixos/#generate-iso","title":"Generate iso","text":"<pre><code>nix build .#nixosConfigurations.live.config.system.build.isoImage\n</code></pre>"},{"location":"nix/troubleshooting/","title":"Troubleshooting","text":""},{"location":"nix/troubleshooting/#apple-upgrades","title":"Apple upgrades","text":"<p>When upgrading macOS your /etc/zshrc might reset. Result: commands or configurations stop working, NIX_PATH is empty etc. Fix: Add this to the bottom of /etc/zshrc.</p> <pre><code>if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then\n. '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'\nfi\n</code></pre>"},{"location":"nix/troubleshooting/#touch-id-for-sudo","title":"Touch ID for sudo","text":"<p>Enable sudo touch id auth</p> <p>Also, macOS resets /etc/pam.d/sudo which enables touch id for sudo. More info here:</p>"},{"location":"nix/troubleshooting/#node-not-available","title":"Node not available","text":"<p>If node isn't available check that host configuration has nix-ld enabled.</p> <pre><code>...\nnixosConfigurations.host = nixpkgs.lib.nixosSystem {\n  modules = [\n    ./&lt;host&gt;/configuration.nix\n    nix-ld.nixosModules.nix-ld\n  ];\n...\n\nprograms.nix-ld.dev.enable = true;\n</code></pre>"}]}